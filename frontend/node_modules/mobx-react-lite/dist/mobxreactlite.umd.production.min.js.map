{"version":3,"file":"mobxreactlite.umd.production.min.js","sources":["../src/assertEnvironment.ts","../src/utils.ts","../src/observerBatching.ts","../src/staticRendering.ts","../src/printDebugValue.ts","../src/reactionCleanupTracking.ts","../src/useQueuedForceUpdate.ts","../src/useObserver.ts","../src/observer.ts","../src/ObserverComponent.ts","../src/useAsObservableSource.ts","../src/index.ts","../src/useLocalStore.ts"],"sourcesContent":["import { spy } from \"mobx\"\nimport { useState } from \"react\"\n\nif (!useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\")\n}\nif (!spy) {\n    throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\")\n}\n","import { useCallback, useEffect, useState } from \"react\"\n\nconst EMPTY_ARRAY: any[] = []\n\nexport function useUnmount(fn: () => void) {\n    useEffect(() => fn, EMPTY_ARRAY)\n}\n\nexport function useForceUpdate() {\n    const [, setTick] = useState(0)\n\n    const update = useCallback(() => {\n        setTick(tick => tick + 1)\n    }, [])\n\n    return update\n}\n\nexport function isPlainObject(value: any): value is object {\n    if (!value || typeof value !== \"object\") {\n        return false\n    }\n    const proto = Object.getPrototypeOf(value)\n    return !proto || proto === Object.prototype\n}\n\nexport function getSymbol(name: string): symbol | string {\n    if (typeof Symbol === \"function\") {\n        return Symbol.for(name)\n    }\n    return `__$mobx-react ${name}__`\n}\n\ndeclare const window: any\ndeclare const self: any\n\nconst mockGlobal = {}\n\nexport function getGlobal() {\n    if (typeof window !== \"undefined\") {\n        return window\n    }\n    if (typeof global !== \"undefined\") {\n        return global\n    }\n    if (typeof self !== \"undefined\") {\n        return self\n    }\n    return mockGlobal\n}\n","import { configure } from \"mobx\"\nimport { getGlobal, getSymbol } from \"./utils\"\n\nconst observerBatchingConfiguredSymbol = getSymbol(\"observerBatching\")\n\nexport function defaultNoopBatch(callback: () => void) {\n    callback()\n}\n\nexport function observerBatching(reactionScheduler: any) {\n    if (!reactionScheduler) {\n        reactionScheduler = defaultNoopBatch\n        if (\"production\" !== process.env.NODE_ENV) {\n            console.warn(\n                \"[MobX] Failed to get unstable_batched updates from react-dom / react-native\"\n            )\n        }\n    }\n    configure({ reactionScheduler })\n    getGlobal()[observerBatchingConfiguredSymbol] = true\n}\n\nexport const isObserverBatched = () => !!getGlobal()[observerBatchingConfiguredSymbol]\n","let globalIsUsingStaticRendering = false\n\nexport function useStaticRendering(enable: boolean) {\n    globalIsUsingStaticRendering = enable\n}\n\nexport function isUsingStaticRendering(): boolean {\n    return globalIsUsingStaticRendering\n}\n","import { getDependencyTree, Reaction } from \"mobx\"\n\nexport function printDebugValue(v: Reaction) {\n    return getDependencyTree(v)\n}\n","import { Reaction } from \"mobx\"\n\nexport interface IReactionTracking {\n    /** The Reaction created during first render, which may be leaked */\n    reaction: Reaction\n    /**\n     * The time (in ticks) at which point we should dispose of the reaction\n     * if this component hasn't yet been fully mounted.\n     */\n    cleanAt: number\n\n    /**\n     * Whether the component has yet completed mounting (for us, whether\n     * its useEffect has run)\n     */\n    mounted?: boolean\n\n    /**\n     * Whether the observables that the component is tracking changed between\n     * the first render and the first useEffect.\n     */\n    changedBeforeMount?: boolean\n}\n\nexport function createTrackingData(reaction: Reaction) {\n    const trackingData: IReactionTracking = {\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n        reaction\n    }\n    return trackingData\n}\n\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10_000\n\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport const CLEANUP_TIMER_LOOP_MILLIS = 10_000\n\n/**\n * Reactions created by components that have yet to be fully mounted.\n */\nconst uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\n\n/**\n * Latest 'uncommitted reactions' cleanup timer handle.\n */\nlet reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\n\nfunction ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\n    }\n}\n\nexport function scheduleCleanupOfReactionIfLeaked(\n    ref: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.add(ref)\n\n    ensureCleanupTimerRunning()\n}\n\nexport function recordReactionAsCommitted(\n    reactionRef: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.delete(reactionRef)\n}\n\n/**\n * Run by the cleanup timer to dispose any outstanding reactions\n */\nfunction cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined\n\n    // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    const now = Date.now()\n    uncommittedReactionRefs.forEach(ref => {\n        const tracking = ref.current\n        if (tracking) {\n            if (now >= tracking.cleanAt) {\n                // It's time to tidy up this leaked reaction.\n                tracking.reaction.dispose()\n                ref.current = null\n                uncommittedReactionRefs.delete(ref)\n            }\n        }\n    })\n\n    if (uncommittedReactionRefs.size > 0) {\n        // We've just finished a round of cleanups but there are still\n        // some leak candidates outstanding.\n        ensureCleanupTimerRunning()\n    }\n}\n\n/* istanbul ignore next */\n/**\n * Only to be used by test functions; do not export outside of mobx-react-lite\n */\nexport function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        cleanUncommittedReactions()\n    }\n}\n\n/* istanbul ignore next */\nexport function resetCleanupScheduleForTests() {\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        reactionCleanupHandle = undefined\n    }\n    uncommittedReactionRefs.clear()\n}\n","import React from \"react\"\n\nexport type ForceUpdate = () => void\n\nlet insideRender: boolean = false\nlet forceUpdateQueue: ForceUpdate[] = []\n\nexport function useQueuedForceUpdate(forceUpdate: ForceUpdate): ForceUpdate {\n    return () => {\n        if (insideRender) {\n            forceUpdateQueue.push(forceUpdate)\n        } else {\n            forceUpdate()\n        }\n    }\n}\n\nexport function useQueuedForceUpdateBlock<T>(callback: () => T) {\n    // start intercepting force-update calls\n    insideRender = true\n    forceUpdateQueue = []\n    try {\n        const result = callback()\n\n        // stop intercepting force-update\n        insideRender = false\n        // store queue or nothing if it was empty to execute useLayoutEffect only when necessary\n        const queue = forceUpdateQueue.length > 0 ? forceUpdateQueue : undefined\n\n        // run force-update queue in useLayoutEffect\n        React.useLayoutEffect(() => {\n            if (queue) {\n                queue.forEach(x => x())\n            }\n        }, [queue])\n\n        return result\n    } finally {\n        insideRender = false\n    }\n}\n","import { Reaction } from \"mobx\"\nimport React from \"react\"\n\nimport { printDebugValue } from \"./printDebugValue\"\nimport {\n    createTrackingData,\n    IReactionTracking,\n    recordReactionAsCommitted,\n    scheduleCleanupOfReactionIfLeaked\n} from \"./reactionCleanupTracking\"\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useForceUpdate } from \"./utils\"\nimport { useQueuedForceUpdate, useQueuedForceUpdateBlock } from \"./useQueuedForceUpdate\"\n\nexport type ForceUpdateHook = () => () => void\n\nexport interface IUseObserverOptions {\n    useForceUpdate?: ForceUpdateHook\n}\n\nconst EMPTY_OBJECT = {}\n\nfunction observerComponentNameFor(baseComponentName: string) {\n    return `observer${baseComponentName}`\n}\n\nexport function useObserver<T>(\n    fn: () => T,\n    baseComponentName: string = \"observed\",\n    options: IUseObserverOptions = EMPTY_OBJECT\n): T {\n    if (isUsingStaticRendering()) {\n        return fn()\n    }\n\n    const wantedForceUpdateHook = options.useForceUpdate || useForceUpdate\n    const forceUpdate = wantedForceUpdateHook()\n    const queuedForceUpdate = useQueuedForceUpdate(forceUpdate)\n\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    const reactionTrackingRef = React.useRef<IReactionTracking | null>(null)\n\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n\n        const newReaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                queuedForceUpdate()\n            } else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.  The easiest way to do that is just to\n                // drop our current reaction and allow useEffect() to recreate it.\n                newReaction.dispose()\n                reactionTrackingRef.current = null\n            }\n        })\n\n        const trackingData = createTrackingData(newReaction)\n        reactionTrackingRef.current = trackingData\n        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\n    }\n\n    const { reaction } = reactionTrackingRef.current!\n    React.useDebugValue(reaction, printDebugValue)\n\n    React.useEffect(() => {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef)\n\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true\n        } else {\n            // The reaction we set up in our render has been disposed.\n            // This is either due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up, or we got a observable change\n            // between render and useEffect\n\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), () => {\n                    // We've definitely already been mounted at this point\n                    queuedForceUpdate()\n                }),\n                cleanAt: Infinity\n            }\n            queuedForceUpdate()\n        }\n\n        return () => {\n            reactionTrackingRef.current!.reaction.dispose()\n            reactionTrackingRef.current = null\n        }\n    }, [])\n\n    // delay all force-update calls after rendering of this component\n    return useQueuedForceUpdateBlock(() => {\n        // render the original component, but have the\n        // reaction track the observables, so that rendering\n        // can be invalidated (see above) once a dependency changes\n        let rendering!: T\n        let exception\n        reaction.track(() => {\n            try {\n                rendering = fn()\n            } catch (e) {\n                exception = e\n            }\n        })\n\n        if (exception) {\n            throw exception // re-throw any exceptions caught during rendering\n        }\n\n        return rendering\n    })\n}\n","import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options?: IObserverOptions\n) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    const realOptions = {\n        forwardRef: false,\n        ...options\n    }\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\n    }\n    wrappedComponent.displayName = baseComponentName\n\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    let memoComponent\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent))\n    } else {\n        memoComponent = memo(wrappedComponent)\n    }\n\n    copyStaticProperties(baseComponent, memoComponent)\n    memoComponent.displayName = baseComponentName\n\n    return memoComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n","import { useObserver } from \"./useObserver\"\n\ninterface IObserverProps {\n    children?(): React.ReactElement | null\n    render?(): React.ReactElement | null\n}\n\nfunction ObserverComponent({ children, render }: IObserverProps) {\n    const component = children || render\n    if (typeof component !== \"function\") {\n        return null\n    }\n    return useObserver(component)\n}\nObserverComponent.propTypes = {\n    children: ObserverPropsCheck,\n    render: ObserverPropsCheck\n}\nObserverComponent.displayName = \"Observer\"\n\nexport { ObserverComponent as Observer }\n\nfunction ObserverPropsCheck(\n    props: { [k: string]: any },\n    key: string,\n    componentName: string,\n    location: any,\n    propFullName: string\n) {\n    const extraKey = key === \"children\" ? \"render\" : \"children\"\n    const hasProp = typeof props[key] === \"function\"\n    const hasExtraProp = typeof props[extraKey] === \"function\"\n    if (hasProp && hasExtraProp) {\n        return new Error(\n            \"MobX Observer: Do not use children and render in the same time in`\" + componentName\n        )\n    }\n\n    if (hasProp || hasExtraProp) {\n        return null\n    }\n    return new Error(\n        \"Invalid prop `\" +\n            propFullName +\n            \"` of type `\" +\n            typeof props[key] +\n            \"` supplied to\" +\n            \" `\" +\n            componentName +\n            \"`, expected `function`.\"\n    )\n}\n","import { observable, runInAction } from \"mobx\"\nimport React from \"react\"\n\nimport { isPlainObject } from \"./utils\"\n\nexport function useAsObservableSourceInternal<TSource>(\n    current: TSource,\n    usedByLocalStore: boolean\n): TSource {\n    const culprit = usedByLocalStore ? \"useLocalStore\" : \"useAsObservableSource\"\n    if (\"production\" !== process.env.NODE_ENV && usedByLocalStore) {\n        const [initialSource] = React.useState(current)\n        if (\n            (initialSource !== undefined && current === undefined) ||\n            (initialSource === undefined && current !== undefined)\n        ) {\n            throw new Error(`make sure you never pass \\`undefined\\` to ${culprit}`)\n        }\n    }\n    if (usedByLocalStore && current === undefined) {\n        return undefined as any\n    }\n    if (\"production\" !== process.env.NODE_ENV && !isPlainObject(current)) {\n        throw new Error(\n            `${culprit} expects a plain object as ${usedByLocalStore ? \"second\" : \"first\"} argument`\n        )\n    }\n\n    const [res] = React.useState(() => observable(current, {}, { deep: false }))\n    if (\n        \"production\" !== process.env.NODE_ENV &&\n        Object.keys(res).length !== Object.keys(current).length\n    ) {\n        throw new Error(`the shape of objects passed to ${culprit} should be stable`)\n    }\n    runInAction(() => {\n        Object.assign(res, current)\n    })\n    return res\n}\n\nexport function useAsObservableSource<TSource>(current: TSource): TSource {\n    return useAsObservableSourceInternal(current, false)\n}\n","import \"./assertEnvironment\"\n\nimport { unstable_batchedUpdates as batch } from \"./utils/reactBatchedUpdates\"\nimport { observerBatching } from \"./observerBatching\"\n\nobserverBatching(batch)\n\nexport { isUsingStaticRendering, useStaticRendering } from \"./staticRendering\"\nexport { observer, IObserverOptions } from \"./observer\"\nexport { useObserver, ForceUpdateHook, IUseObserverOptions } from \"./useObserver\"\nexport { Observer } from \"./ObserverComponent\"\nexport { useForceUpdate } from \"./utils\"\nexport { useAsObservableSource } from \"./useAsObservableSource\"\nexport { useLocalStore } from \"./useLocalStore\"\nexport { useQueuedForceUpdate, useQueuedForceUpdateBlock } from \"./useQueuedForceUpdate\"\nexport { isObserverBatched, observerBatching } from \"./observerBatching\"\n","import { observable, runInAction, transaction } from \"mobx\"\nimport React from \"react\"\n\nimport { useAsObservableSourceInternal } from \"./useAsObservableSource\"\nimport { isPlainObject } from \"./utils\"\n\nexport function useLocalStore<TStore extends Record<string, any>>(initializer: () => TStore): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source: TSource) => TStore,\n    current: TSource\n): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source?: TSource) => TStore,\n    current?: TSource\n): TStore {\n    const source = useAsObservableSourceInternal(current, true)\n\n    return React.useState(() => {\n        const local = observable(initializer(source))\n        if (isPlainObject(local)) {\n            runInAction(() => {\n                Object.keys(local).forEach(key => {\n                    const value = local[key]\n                    if (typeof value === \"function\") {\n                        // @ts-ignore No idea why ts2536 is popping out here\n                        local[key] = wrapInTransaction(value, local)\n                    }\n                })\n            })\n        }\n        return local\n    })[0]\n}\n\n// tslint:disable-next-line: ban-types\nfunction wrapInTransaction(fn: Function, context: object) {\n    return (...args: unknown[]) => {\n        return transaction(() => fn.apply(context, args))\n    }\n}\n"],"names":["useState","Error","spy","useForceUpdate","setTick","useCallback","tick","getSymbol","name","Symbol","for","mockGlobal","getGlobal","window","global","self","observerBatchingConfiguredSymbol","defaultNoopBatch","callback","observerBatching","reactionScheduler","configure","globalIsUsingStaticRendering","isUsingStaticRendering","printDebugValue","v","getDependencyTree","reactionCleanupHandle","uncommittedReactionRefs","Set","ensureCleanupTimerRunning","undefined","setTimeout","cleanUncommittedReactions","now","Date","forEach","ref","tracking","current","cleanAt","reaction","dispose","delete","size","insideRender","forceUpdateQueue","useQueuedForceUpdate","forceUpdate","push","useQueuedForceUpdateBlock","result","queue","length","React","useLayoutEffect","x","EMPTY_OBJECT","observerComponentNameFor","baseComponentName","useObserver","fn","options","queuedForceUpdate","reactionTrackingRef","useRef","newReaction","Reaction","trackingData","mounted","createTrackingData","add","useDebugValue","useEffect","Infinity","rendering","exception","track","e","hoistBlackList","$$typeof","render","compare","type","ObserverComponent","component","children","ObserverPropsCheck","props","key","componentName","location","propFullName","hasProp","hasExtraProp","useAsObservableSourceInternal","usedByLocalStore","res","observable","deep","runInAction","Object","assign","propTypes","displayName","batch","baseComponent","memoComponent","base","target","realOptions","forwardRef","wrappedComponent","memo","keys","defineProperty","getOwnPropertyDescriptor","initializer","source","local","value","proto","getPrototypeOf","prototype","isPlainObject","context","args","transaction","apply","enable"],"mappings":"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"}